import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { saveAs } from 'file-saver';

/**
 * PDF Export Utility for Company Insights Dashboard
 * Captures charts and generates formatted PDF reports
 */

export class PDFExportService {
    constructor() {
        this.pdf = null;
        this.currentY = 20;
        this.pageHeight = 297; // A4 height in mm
        this.pageWidth = 210;  // A4 width in mm
        this.margin = 20;
    }

    /**
     * Initialize PDF document with header and metadata
     */
    initializePDF(companyName = 'Company', reportType = 'Insights Report') {
        this.pdf = new jsPDF('p', 'mm', 'a4');
        this.currentY = 20;

        // Set metadata
        this.pdf.setProperties({
            title: `${companyName} - ${reportType}`,
            subject: 'Company Analytics Dashboard Export',
            author: 'Placify Platform',
            creator: 'Placify Insights Dashboard'
        });

        // Add header
        this.addHeader(companyName, reportType);
        return this.pdf;
    }

    /**
     * Add header to PDF with company branding
     */
    addHeader(companyName, reportType) {
        const { pdf } = this;

        // Header background
        pdf.setFillColor(139, 92, 246); // Purple theme
        pdf.rect(0, 0, this.pageWidth, 25, 'F');

        // Company name and title
        pdf.setTextColor(255, 255, 255);
        pdf.setFontSize(20);
        pdf.setFont('helvetica', 'bold');
        pdf.text(companyName, this.margin, 12);

        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'normal');
        pdf.text(reportType, this.margin, 18);

        // Timestamp
        const timestamp = new Date().toLocaleString();
        const timestampWidth = pdf.getTextWidth(timestamp);
        pdf.text(timestamp, this.pageWidth - this.margin - timestampWidth, 18);

        this.currentY = 35;
    }

    /**
     * Add footer to current page
     */
    addFooter() {
        const { pdf } = this;
        const pageNumber = pdf.internal.getNumberOfPages();

        pdf.setTextColor(128, 128, 128);
        pdf.setFontSize(8);
        pdf.text(
            `Generated by Placify Platform - Page ${pageNumber}`,
            this.margin,
            this.pageHeight - 10
        );

        pdf.text(
            'Confidential - For Internal Use Only',
            this.pageWidth - this.margin - pdf.getTextWidth('Confidential - For Internal Use Only'),
            this.pageHeight - 10
        );
    }

    /**
     * Add new page with header and footer
     */
    addNewPage() {
        this.addFooter();
        this.pdf.addPage();
        this.addHeader('Company', 'Insights Report');
    }

    /**
     * Add section title
     */
    addSectionTitle(title) {
        // Check if we need a new page
        if (this.currentY > this.pageHeight - 40) {
            this.addNewPage();
        }

        this.pdf.setTextColor(0, 0, 0);
        this.pdf.setFontSize(16);
        this.pdf.setFont('helvetica', 'bold');
        this.pdf.text(title, this.margin, this.currentY);
        this.currentY += 15;
    }

    /**
     * Add descriptive text
     */
    addText(text, fontSize = 10) {
        this.pdf.setTextColor(64, 64, 64);
        this.pdf.setFontSize(fontSize);
        this.pdf.setFont('helvetica', 'normal');

        // Handle text wrapping
        const lines = this.pdf.splitTextToSize(text, this.pageWidth - 2 * this.margin);
        this.pdf.text(lines, this.margin, this.currentY);
        this.currentY += lines.length * 5 + 5;
    }

    /**
     * Capture DOM element as image and add to PDF
     */
    async captureChart(elementId, title = '', options = {}) {
        const element = document.getElementById(elementId);
        if (!element) {
            console.warn(`Element with ID ${elementId} not found`);
            return false;
        }

        try {
            // Default options for html2canvas
            const defaultOptions = {
                scale: 2,
                useCORS: true,
                allowTaint: true,
                backgroundColor: '#ffffff',
                removeContainer: true,
                imageTimeout: 10000,
                ...options
            };

            const canvas = await html2canvas(element, defaultOptions);
            const imgData = canvas.toDataURL('image/jpeg', 0.95);

            // Calculate dimensions
            const imgWidth = this.pageWidth - 2 * this.margin;
            const imgHeight = (canvas.height * imgWidth) / canvas.width;

            // Check if we need a new page
            if (this.currentY + imgHeight > this.pageHeight - 30) {
                this.addNewPage();
            }

            // Add title if provided
            if (title) {
                this.addSectionTitle(title);
            }

            // Add image
            this.pdf.addImage(imgData, 'JPEG', this.margin, this.currentY, imgWidth, imgHeight);
            this.currentY += imgHeight + 10;

            return true;
        } catch (error) {
            console.error(`Error capturing chart ${elementId}:`, error);
            this.addText(`❌ Error capturing chart: ${title || elementId}`);
            return false;
        }
    }

    /**
     * Add key metrics summary
     */
    addMetricsSummary(metrics) {
        this.addSectionTitle('📊 Key Performance Metrics');

        const tableData = [];
        Object.entries(metrics).forEach(([key, value]) => {
            tableData.push([key, value.toString()]);
        });

        // Simple table implementation
        let rowY = this.currentY;
        this.pdf.setFontSize(10);

        tableData.forEach(([metric, value]) => {
            if (rowY > this.pageHeight - 40) {
                this.addNewPage();
                rowY = this.currentY;
            }

            this.pdf.setFont('helvetica', 'bold');
            this.pdf.text(metric + ':', this.margin, rowY);
            this.pdf.setFont('helvetica', 'normal');
            this.pdf.text(value, this.margin + 60, rowY);
            rowY += 8;
        });

        this.currentY = rowY + 10;
    }

    /**
     * Add insights summary section
     */
    addInsightsSummary(timeRange, insights) {
        this.addSectionTitle('🔍 Executive Summary');

        const summaryText = `
This report presents comprehensive insights for the selected ${timeRange} period. 
The dashboard analytics show key performance indicators including interview volumes, 
placement success rates, skill demand patterns, and institutional performance metrics.

Key Highlights:
• Total interviews conducted: ${insights.totalInterviews || 'N/A'}
• Successful placements: ${insights.totalPlacements || 'N/A'}
• Average interview score: ${insights.avgScore || 'N/A'}
• Partner companies: ${insights.partnerCompanies || 'N/A'}

This data provides actionable insights for improving recruitment processes and 
optimizing placement outcomes across the platform.
    `.trim();

        this.addText(summaryText, 10);
    }

    /**
     * Finalize and download PDF
     */
    async downloadPDF(filename = 'company-insights-report.pdf') {
        if (!this.pdf) {
            throw new Error('PDF not initialized');
        }

        // Add final footer
        this.addFooter();

        // Generate blob and download
        const pdfBlob = this.pdf.output('blob');
        saveAs(pdfBlob, filename);

        return pdfBlob;
    }
}

/**
 * Export configuration options
 */
export const EXPORT_SECTIONS = {
    SUMMARY: 'summary',
    CHARTS: 'charts',
    METRICS: 'metrics',
    RAW_DATA: 'rawData'
};

/**
 * Main export function for the Insights dashboard
 */
export async function exportInsightsToPDF(options = {}) {
    const {
        companyName = 'Company',
        timeRange = '3M',
        sections = [EXPORT_SECTIONS.SUMMARY, EXPORT_SECTIONS.CHARTS, EXPORT_SECTIONS.METRICS],
        currentData = {},
        filename = `${companyName.toLowerCase().replace(/\s+/g, '-')}-insights-${Date.now()}.pdf`
    } = options;

    const exportService = new PDFExportService();
    exportService.initializePDF(companyName, `Insights Report (${timeRange})`);

    try {
        // Add executive summary
        if (sections.includes(EXPORT_SECTIONS.SUMMARY)) {
            exportService.addInsightsSummary(timeRange, currentData);
        }

        // Add key metrics
        if (sections.includes(EXPORT_SECTIONS.METRICS)) {
            const metrics = {
                'Total Interviews': currentData.totalInterviews || 'N/A',
                'Successful Placements': currentData.totalPlacements || 'N/A',
                'Average Score': currentData.avgScore || 'N/A',
                'Partner Companies': currentData.partnerCompanies || 'N/A',
                'Time Period': timeRange,
                'Report Generated': new Date().toLocaleDateString()
            };
            exportService.addMetricsSummary(metrics);
        }

        // Capture charts
        if (sections.includes(EXPORT_SECTIONS.CHARTS)) {
            const charts = [
                { id: 'interview-trends-chart', title: 'Interview & Placement Trends' },
                { id: 'skills-distribution-chart', title: 'Skills in Demand' },
                { id: 'college-performance-chart', title: 'Top Performing Colleges' },
                { id: 'performance-categories-chart', title: 'Performance by Category' },
                { id: 'weekly-activity-chart', title: 'Weekly Interview Activity' },
                { id: 'success-rate-chart', title: 'Placement Success Rate' },
                { id: 'quick-stats-section', title: 'Key Statistics' }
            ];

            for (const chart of charts) {
                await exportService.captureChart(chart.id, chart.title);
                // Small delay to ensure proper rendering
                await new Promise(resolve => setTimeout(resolve, 500));
            }
        }

        // Download the PDF
        await exportService.downloadPDF(filename);

        return { success: true, filename };
    } catch (error) {
        console.error('Error generating PDF:', error);
        throw new Error(`Failed to generate PDF: ${error.message}`);
    }
}

/**
 * Export individual chart as PNG
 */
export async function exportChartAsImage(elementId, filename) {
    const element = document.getElementById(elementId);
    if (!element) {
        throw new Error(`Element with ID ${elementId} not found`);
    }

    try {
        const canvas = await html2canvas(element, {
            scale: 2,
            useCORS: true,
            allowTaint: true,
            backgroundColor: '#ffffff'
        });

        canvas.toBlob((blob) => {
            saveAs(blob, filename || `chart-${elementId}-${Date.now()}.png`);
        }, 'image/png');

        return { success: true, filename };
    } catch (error) {
        console.error('Error exporting chart as image:', error);
        throw new Error(`Failed to export chart: ${error.message}`);
    }
}